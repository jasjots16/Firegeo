'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Download, FileText, Loader2, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';

interface ReportData {
  htmlContent: string;
  customerName: string;
  reportType: string;
  generatedAt: string;
}

export default function AEOReportPage() {
  const [customerName, setCustomerName] = useState('');
  const [url, setUrl] = useState('');
  // Unified flow: always generate a combined report on the server
  // Removed report type selection
  // const [reportType, setReportType] = useState<'basic' | 'extended' | 'schema' | 'aeo'>('aeo');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [reportData, setReportData] = useState<ReportData | null>(null);
  const [error, setError] = useState<string | null>(null);

  const generateReport = async () => {
    if (!customerName.trim()) {
      toast.error('Please enter a customer name');
      return;
    }

    if (!url.trim()) {
      toast.error('Please enter a website URL');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      const response = await fetch('/api/aeo-report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          customerName: customerName.trim(),
          url: url.trim(),
          // server always generates combined report
          reportType: 'combined',
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate report');
      }

      setReportData(data);
      toast.success('Report generated successfully!');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsGenerating(false);
    }
  };

  const loadExistingReport = async () => {
    if (!customerName.trim()) {
      toast.error('Please enter a customer name');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/aeo-report?customerName=${encodeURIComponent(customerName.trim())}&reportType=basic`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to load report');
      }

      setReportData(data);
      toast.success('Report loaded successfully!');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Report not found';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const downloadPDF = async () => {
    if (!reportData) return;

    try {
      // Create a new window with the report content
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        toast.error('Please allow popups to download PDF');
        return;
      }

      // Enhanced HTML with better PDF styling
      const printContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>AEO Report - ${reportData.customerName}</title>
          <style>
            @media print {
              body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
              .no-print { display: none !important; }
              .page-break { page-break-before: always; }
              table { page-break-inside: avoid; }
              .card { page-break-inside: avoid; margin-bottom: 20px; }
            }
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #004d99; padding-bottom: 20px; }
            .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>AEO Report</h1>
            <p>Customer: ${reportData.customerName} | Generated: ${new Date(reportData.generatedAt).toLocaleString()}</p>
          </div>
          ${reportData.htmlContent}
          <div class="footer">
            <p>Generated by Firegeo AEO Analysis System</p>
          </div>
        </body>
        </html>
      `;

      printWindow.document.write(printContent);
      printWindow.document.close();

      // Wait for content to load then trigger print
      printWindow.onload = () => {
        setTimeout(() => {
          printWindow.print();
          printWindow.close();
        }, 500);
      };

      toast.success('PDF download initiated');
    } catch (err) {
      toast.error('Failed to generate PDF');
    }
  };

  return (
      <div className="min-h-screen pl-16 md:pl-0">
          <div className="container mx-auto py-8 px-4">
          <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">AEO Report Generator</h1>
          <p className="text-muted-foreground">
            Generate comprehensive AEO (Answer Engine Optimization) reports for your clients
          </p>
        </div>

        <Tabs defaultValue="generate" className="space-y-6">
          <TabsList className="grid w-full grid-cols-1">
            <TabsTrigger value="generate">Generate New Report</TabsTrigger>
          </TabsList>

          <TabsContent value="generate" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Generate New AEO Report</CardTitle>
                <CardDescription>
                  Create a new combined AEO report (Extended + AEO + Schema) by providing customer details
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="customerName">Customer Name *</Label>
                    <Input
                      id="customerName"
                      placeholder="Enter customer name"
                      value={customerName}
                      onChange={(e) => setCustomerName(e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="url">Website URL *</Label>
                    <Input
                      id="url"
                      placeholder="https://example.com"
                      value={url}
                      onChange={(e) => setUrl(e.target.value)}
                    />
                  </div>
                </div>

                <Button 
                  onClick={generateReport} 
                  disabled={isGenerating}
                  className="w-full md:w-auto"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating Report...
                    </>
                  ) : (
                    <>
                      <FileText className="mr-2 h-4 w-4" />
                      Generate Report
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>


        </Tabs>

        {error && (
          <Card className="border-red-200 bg-red-50">
            <CardContent className="pt-6">
              <div className="flex items-center space-x-2 text-red-700">
                <AlertCircle className="h-4 w-4" />
                <span>{error}</span>
              </div>
            </CardContent>
          </Card>
        )}

        {reportData && (
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>AEO Report - {reportData.customerName}</CardTitle>
                  <CardDescription>
                    Generated on {new Date(reportData.generatedAt).toLocaleString()} | Type: {reportData.reportType}
                  </CardDescription>
                </div>
                <Button onClick={downloadPDF} variant="outline">
                  <Download className="mr-2 h-4 w-4" />
                  Download PDF
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div 
                className="report-content border rounded-lg p-4 bg-white"
                dangerouslySetInnerHTML={{ __html: reportData.htmlContent }}
              />
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}